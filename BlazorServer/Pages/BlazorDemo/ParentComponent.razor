@page "/blazordemo/parentComponent"
@using System.Diagnostics

<h3>ParentComponent / Child Relation</h3>

@*#1 & #2 - same result*@
<CascadingValue Value="MessageForGrandChild" Name="message">
    <CascadingValue Value="@LuckyNumber" Name="luckyNumber">
        <_ChildComponent OnButtonClick="ShowMessage" Title="This title is passed as parameter from the parent component">
            <ChildContent>RenderFragment from parent(1)! Show me my text with syntaxical sugar flavor sauce! (1vs2) </ChildContent>
        </_ChildComponent>
    </CascadingValue>
</CascadingValue>


@*<_ChildComponent OnButtonClick="ShowMessage" Title="This title is passed as parameter from the parent component">
    RenderFragment from parent(2)! - Show me my text
</_ChildComponent>
*@

<p><strong>@MessageText</strong></p>
<_AnotherChildComponent Placeholder="Placeholder from parent"></_AnotherChildComponent>

@*Show parameter overrides*@
@*<_AnotherChildComponent Placeholder="Placeholder from parent"></_AnotherChildComponent>*@
@*<_AnotherChildComponent Placeholder="Placeholder from parent" MaxLength="5"></_AnotherChildComponent>*@
@*<_AnotherChildComponent InputAttributes="InputAttributesFromParent"></_AnotherChildComponent>*@


@*<_ChildComponent Title="This is an empty second child component">
</_ChildComponent>*@

@code {

    public string MessageForGrandChild = "This message is from your grand parent (ParentComponent)";
    public int LuckyNumber = 7;

    //// sample attribute splatting
    //public Dictionary<string, object> InputAttributesFromParent { get; set; } = new ()
    //{
    //    { "required", "required" },
    //    { "placeholder", "Enter name from parent" },
    //    { "maxlength", 5 }
    //};

    public string MessageText = string.Empty;

    private void ShowMessage()
    {
        MessageText = "Button clicked from Child Component";
    }




}
